/**
 * Transfer Matrix Method (TMM) calculator Vue component.
 * Copyright (c) 2025, Luocheng Huang
 */
const{createApp:createApp,ref:ref,computed:computed,onMounted:onMounted}=Vue,TMMCalculator={template:'\n        <div class="tmm-app">\n            <div class="wavelength-controls">\n                <h3>Wavelength Range</h3>\n                <div class="wavelength-inputs">\n                    <div class="input-group">\n                        <label>Start:</label>\n                        <input type="number" v-model="wavelengthStart" min="200" max="2000" step="1">\n                        <span>nm</span>\n                    </div>\n                    <div class="input-group">\n                        <label>End:</label>\n                        <input type="number" v-model="wavelengthEnd" min="200" max="2000" step="1">\n                        <span>nm</span>\n                    </div>\n                    <div class="input-group">\n                        <label>Points:</label>\n                        <input type="number" v-model="wavelengthPoints" min="10" max="1000" step="1">\n                    </div>\n                </div>\n            </div>\n\n            <div class="layers-controls">\n                <h3>Layers</h3>\n                <div v-for="(layer, index) in layers" :key="index" class="layer">\n                    <div class="layer-inputs">\n                        <div class="input-group">\n                            <label>n:</label>\n                            <input type="number" v-model="layer.n" step="0.01">\n                        </div>\n                        <div class="input-group">\n                            <label>k:</label>\n                            <input type="number" v-model="layer.k" step="0.01">\n                        </div>\n                        <div class="input-group">\n                            <label>d:</label>\n                            <input type="number" v-model="layer.d" step="1" :disabled="index === 0 || index === layers.length - 1">\n                            <span>nm</span>\n                        </div>\n                        <button class="remove-button" @click="removeLayer(index)" v-if="index !== 0 && index !== layers.length - 1">Remove</button>\n                    </div>\n                </div>\n                <button class="add-button" @click="addLayer">Add Layer</button>\n            </div>\n\n            <div class="angle-controls">\n                <h3>Incident Angle</h3>\n                <div class="angle-control">\n                    <label>\u03b8:</label>\n                    <input type="range" v-model="angle" min="0" max="90" step="0.1">\n                    <span>{{ angle.toFixed(1) }}\xb0</span>\n                </div>\n            </div>\n\n            <div class="polarization-controls">\n                <h3>Polarization</h3>\n                <div class="checkbox-group">\n                    <label>\n                        <input type="checkbox" v-model="polarization.TE"> TE\n                    </label>\n                    <label>\n                        <input type="checkbox" v-model="polarization.TM"> TM\n                    </label>\n                </div>\n            </div>\n\n            <button class="calculate-button" @click="calculate">Calculate</button>\n\n            <div class="plots">\n                <div class="plot-container">\n                    <h3>Reflectance vs Wavelength</h3>\n                    <div id="reflectance-plot"></div>\n                </div>\n                <div class="plot-container">\n                    <h3>Transmittance vs Wavelength</h3>\n                    <div id="transmittance-plot"></div>\n                </div>\n                <div class="plot-container">\n                    <h3>Absorbance vs Wavelength</h3>\n                    <div id="absorbance-plot"></div>\n                </div>\n            </div>\n        </div>\n    ',setup(){const n=ref(400),e=ref(800),a=ref(100),l=ref(0),t=ref({TE:!0,TM:!0}),i=ref([{n:1,k:0,d:0},{n:1.5,k:0,d:100},{n:1,k:0,d:0}]),s=()=>{const n={n:1.5,k:0,d:100};i.value.splice(i.value.length-1,0,n)},o=n=>{n>0&&n<i.value.length-1&&i.value.splice(n,1)},c=()=>{const s=generateWavelengthArray(n.value,e.value,a.value),o=[],c=[],d=[];s.forEach(n=>{const e=calculateRT(i.value,n,l.value,t.value);o.push(e.R),c.push(e.T),d.push(e.A)});const p={x:s,y:o,type:"scatter",mode:"lines",name:"Reflectance"},v={x:s,y:c,type:"scatter",mode:"lines",name:"Transmittance"},r={x:s,y:d,type:"scatter",mode:"lines",name:"Absorbance"},u={xaxis:{title:"Wavelength (nm)"},yaxis:{title:"Value",range:[0,1]}};Plotly.newPlot("reflectance-plot",[p],u),Plotly.newPlot("transmittance-plot",[v],u),Plotly.newPlot("absorbance-plot",[r],u)};return onMounted(()=>{c()}),{wavelengthStart:n,wavelengthEnd:e,wavelengthPoints:a,angle:l,polarization:t,layers:i,addLayer:s,removeLayer:o,calculate:c}}},app=createApp({components:{"tmm-calculator":TMMCalculator},template:"<tmm-calculator></tmm-calculator>"});app.mount("#tmm-app");