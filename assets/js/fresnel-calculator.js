const FresnelCalculator={template:'\n    <div class="fresnel-calculator">\n      <div class="row">\n        <div class="col-12">\n          <div class="card">\n            <div class="card-body">\n              <h5 class="card-title">Input Parameters</h5>\n              <div class="row">\n                <div class="col-md-6">\n                  <div class="mb-3">\n                    <label for="n1" class="form-label">Refractive Index n1</label>\n                    <input type="number" class="form-control" id="n1" \n                           :value="n1" \n                           @input="handleInputChange(\'n1\', $event.target.value)" \n                           step="0.01">\n                  </div>\n                </div>\n                <div class="col-md-6">\n                  <div class="mb-3">\n                    <label for="n2" class="form-label">Refractive Index n2</label>\n                    <input type="number" class="form-control" id="n2" \n                           :value="n2" \n                           @input="handleInputChange(\'n2\', $event.target.value)" \n                           step="0.01">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class="row mt-4">\n        <div class="col-12">\n          <div class="card">\n            <div class="card-body">\n              <h5 class="card-title">Reflection Plot</h5>\n              <canvas ref="plotCanvas"></canvas>\n              <div class="mt-3">\n                <div class="alert alert-info">\n                  <strong>Brewster Angle:</strong> {{ calculateBrewsterAngle().toFixed(2) }}\xb0\n                </div>\n                <div class="alert alert-warning" v-if="calculateCriticalAngle() !== null">\n                  <strong>Critical Angle (TIR):</strong> {{ calculateCriticalAngle().toFixed(2) }}\xb0\n                </div>\n                <div class="alert alert-secondary" v-else>\n                  <strong>Total Internal Reflection:</strong> Not possible (n1 \u2264 n2)\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ',data:()=>({n1:1,n2:1.5,chart:null}),methods:{handleInputChange(n,t){""===t||isNaN(t)?this[n]=1:this[n]=parseFloat(t)},calculateRs(n){const t=n*Math.PI/180,a=Math.sin(t),l=Math.sqrt(1-(this.n1/this.n2*a)**2);return((this.n1*Math.cos(t)-this.n2*l)/(this.n1*Math.cos(t)+this.n2*l))**2},calculateRp(n){const t=n*Math.PI/180,a=Math.sin(t),l=Math.sqrt(1-(this.n1/this.n2*a)**2);return((this.n2*Math.cos(t)-this.n1*l)/(this.n2*Math.cos(t)+this.n1*l))**2},calculateBrewsterAngle(){return 180*Math.atan(this.n2/this.n1)/Math.PI},calculateCriticalAngle(){return this.n1<=this.n2?null:180*Math.asin(this.n2/this.n1)/Math.PI},updatePlot(){const n=this.calculateCriticalAngle(),t=null!==n?n:90,a=100,l=Array.from({length:a},(n,l)=>l*t/(a-1)),e=l.map(n=>this.calculateRs(n)),s=l.map(n=>this.calculateRp(n));this.chart&&this.chart.destroy();const i=this.$refs.plotCanvas.getContext("2d");this.chart=new Chart(i,{type:"line",data:{labels:l.map(n=>n.toFixed(1)),datasets:[{label:"s-polarization",data:e,borderColor:"rgb(75, 192, 192)",tension:.1},{label:"p-polarization",data:s,borderColor:"rgb(255, 99, 132)",tension:.1}]},options:{responsive:!0,animation:!1,scales:{x:{title:{display:!0,text:"Angle of Incidence (degrees)"},min:0,max:t},y:{title:{display:!0,text:"Reflection Coefficient"},min:0,max:1}}}})}},watch:{n1(){this.updatePlot()},n2(){this.updatePlot()}},mounted(){this.updatePlot()}},app=Vue.createApp({components:{"fresnel-calculator":FresnelCalculator}});app.mount("#fresnel-app");